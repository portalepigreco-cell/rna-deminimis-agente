{
  "name": "RNA De Minimis Calculator",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1"
            }
          ]
        }
      },
      "id": "3c5b3b3e-4f5a-4b4e-9c8d-1a2b3c4d5e6f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://www.rna.gov.it/trasparenza/aiuti",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "1a2b3c4d-5e6f-7890-abcd-ef1234567890",
      "name": "Get RNA Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Estrae il token CSRF e prepara i cookies\nconst response = $input.first();\nconst html = response.json.body;\nconst headers = response.json.headers;\n\n// Estrai cookies dalla risposta\nlet cookies = '';\nif (headers['set-cookie']) {\n  cookies = headers['set-cookie'].map(cookie => cookie.split(';')[0]).join('; ');\n}\n\n// Estrai token CSRF (cerca pattern comuni)\nlet csrfToken = '';\nconst csrfMatch = html.match(/name=\"_token\"[^>]*value=\"([^\"]+)\"/i) || \n                 html.match(/csrf[_-]?token[\"']?[^>]*[\"']([^\"']+)/i);\nif (csrfMatch) {\n  csrfToken = csrfMatch[1];\n}\n\n// Estrai form action se presente\nlet formAction = '/trasparenza/aiuti';\nconst actionMatch = html.match(/<form[^>]*action=[\"']([^\"']+)[\"']/i);\nif (actionMatch) {\n  formAction = actionMatch[1];\n}\n\nreturn {\n  cookies: cookies,\n  csrfToken: csrfToken,\n  formAction: formAction,\n  html: html\n};"
      },
      "id": "2b3c4d5e-6f78-9012-3456-789abcdef012",
      "name": "Extract Tokens",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.rna.gov.it/trasparenza/aiuti",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            },
            {
              "name": "Referer",
              "value": "https://www.rna.gov.it/trasparenza/aiuti"
            },
            {
              "name": "Cookie",
              "value": "={{ $json.cookies }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cf_beneficiario",
              "value": "03254550738"
            },
            {
              "name": "tipo_procedimento",
              "value": "de_minimis"
            },
            {
              "name": "_token",
              "value": "={{ $json.csrfToken }}"
            },
            {
              "name": "submit",
              "value": "Cerca"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          },
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          }
        }
      },
      "id": "3c4d5e6f-7890-1234-5678-90abcdef1234",
      "name": "Submit Search Form",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Estrae e somma i valori della colonna \"Elemento Aiuto\"\nconst response = $input.first();\nlet html = '';\n\n// Gestisce sia response diretta che response con redirect\nif (response.json && response.json.body) {\n  html = response.json.body;\n} else if (typeof response.json === 'string') {\n  html = response.json;\n} else {\n  html = JSON.stringify(response);\n}\n\n// Pattern per trovare i valori monetari nella colonna Elemento Aiuto\n// Cerca tabelle con header che contiene \"Elemento\" e \"Aiuto\"\nconst tableRegex = /<table[^>]*>[\\s\\S]*?<\\/table>/gi;\nconst tables = html.match(tableRegex) || [];\n\nlet totalAmount = 0;\nlet foundValues = [];\nlet debugInfo = [];\n\ntables.forEach((table, tableIndex) => {\n  // Cerca se la tabella contiene le colonne che ci interessano\n  if (table.toLowerCase().includes('elemento') && table.toLowerCase().includes('aiuto')) {\n    debugInfo.push(`Trovata tabella ${tableIndex + 1} con colonne Elemento Aiuto`);\n    \n    // Estrai tutte le righe della tabella\n    const rowRegex = /<tr[^>]*>[\\s\\S]*?<\\/tr>/gi;\n    const rows = table.match(rowRegex) || [];\n    \n    // Trova l'indice della colonna \"Elemento Aiuto\"\n    const headerRow = rows[0] || '';\n    const headerCells = headerRow.match(/<th[^>]*>[\\s\\S]*?<\\/th>/gi) || [];\n    let elementoAiutoColumnIndex = -1;\n    \n    headerCells.forEach((cell, index) => {\n      const cellText = cell.replace(/<[^>]*>/g, '').trim().toLowerCase();\n      if (cellText.includes('elemento') && cellText.includes('aiuto')) {\n        elementoAiutoColumnIndex = index;\n        debugInfo.push(`Colonna Elemento Aiuto trovata all'indice ${index}`);\n      }\n    });\n    \n    // Se trovata la colonna, estrai i valori\n    if (elementoAiutoColumnIndex >= 0) {\n      for (let i = 1; i < rows.length; i++) { // Salta l'header\n        const cells = rows[i].match(/<td[^>]*>[\\s\\S]*?<\\/td>/gi) || [];\n        if (cells[elementoAiutoColumnIndex]) {\n          const cellContent = cells[elementoAiutoColumnIndex].replace(/<[^>]*>/g, '').trim();\n          \n          // Estrai valore numerico (cerca pattern come \"1.234,56\" o \"1234.56\")\n          const numericMatch = cellContent.match(/([0-9]{1,3}(?:[.,][0-9]{3})*(?:[.,][0-9]{2})?)/g);\n          if (numericMatch) {\n            numericMatch.forEach(match => {\n              // Converte formato italiano (1.234,56) in numero\n              let value = match.replace(/\\./g, '').replace(',', '.');\n              const numValue = parseFloat(value);\n              if (!isNaN(numValue)) {\n                totalAmount += numValue;\n                foundValues.push({ original: match, parsed: numValue });\n                debugInfo.push(`Valore trovato: ${match} → ${numValue}`);\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n});\n\n// Se non trova tabelle strutturate, cerca pattern generici di importi\nif (foundValues.length === 0) {\n  debugInfo.push('Nessuna tabella strutturata trovata, cerco pattern generici');\n  \n  // Pattern per importi in euro (€ 1.234,56 o 1.234,56 €)\n  const euroPattern = /(?:€\\s*)?([0-9]{1,3}(?:[.,][0-9]{3})*(?:[.,][0-9]{2})?)(?:\\s*€)?/g;\n  const matches = html.match(euroPattern) || [];\n  \n  matches.forEach(match => {\n    const numericPart = match.replace(/€/g, '').trim();\n    let value = numericPart.replace(/\\./g, '').replace(',', '.');\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue) && numValue > 0) {\n      // Filtra valori troppo piccoli (probabilmente non sono importi)\n      if (numValue >= 1) {\n        totalAmount += numValue;\n        foundValues.push({ original: match, parsed: numValue });\n        debugInfo.push(`Pattern generico trovato: ${match} → ${numValue}`);\n      }\n    }\n  });\n}\n\nreturn {\n  partitaIva: '03254550738',\n  totaleDeMinimisTrovato: totalAmount,\n  valoriTrovati: foundValues,\n  numeroValori: foundValues.length,\n  debugInfo: debugInfo,\n  dataRicerca: new Date().toISOString(),\n  htmlLength: html.length,\n  contieneRisultati: html.toLowerCase().includes('nessun risultato') ? false : true\n};"
      },
      "id": "4d5e6f78-9012-3456-7890-abcdef123456",
      "name": "Extract and Sum Amounts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "5e6f7890-1234-5678-9012-3456789abcde",
      "name": "Prepare Email Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "subject": "=Totale De Minimis per P.IVA {{ $json.partitaIva }}",
        "emailType": "html",
        "message": "=<h2>Riepilogo De Minimis - RNA</h2>\n<p><strong>Partita IVA:</strong> {{ $json.partitaIva }}</p>\n<p><strong>Totale De Minimis trovato:</strong> <span style=\"color: #007BFF; font-size: 1.2em; font-weight: bold;\">€ {{ $json.totaleDeMinimisTrovato.toLocaleString('it-IT', {minimumFractionDigits: 2, maximumFractionDigits: 2}) }}</span></p>\n<p><strong>Numero di aiuti trovati:</strong> {{ $json.numeroValori }}</p>\n<p><strong>Data ricerca:</strong> {{ $json.dataRicerca }}</p>\n\n<h3>Dettaglio valori trovati:</h3>\n<ul>\n{{ $json.valoriTrovati.map(v => '<li>€ ' + v.parsed.toLocaleString('it-IT', {minimumFractionDigits: 2, maximumFractionDigits: 2}) + ' (originale: ' + v.original + ')</li>').join('') }}\n</ul>\n\n<hr>\n<small>Generato automaticamente da n8n - {{ new Date().toLocaleString('it-IT') }}</small>",
        "options": {}
      },
      "id": "6f789012-3456-7890-1234-56789abcdef0",
      "name": "Send Email Report",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1560,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get RNA Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get RNA Page": {
      "main": [
        [
          {
            "node": "Extract Tokens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tokens": {
      "main": [
        [
          {
            "node": "Submit Search Form",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Search Form": {
      "main": [
        [
          {
            "node": "Extract and Sum Amounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract and Sum Amounts": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Data": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
